overlay: 1.0.0
info:
  title: CodeSamples overlay for python target
  version: 0.0.0
actions:
  - target: $["paths"]["/audio-to-text"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: genAudioToText
          source: |-
            from livepeer_ai import Livepeer

            with Livepeer(
                http_bearer="<YOUR_BEARER_TOKEN_HERE>",
            ) as livepeer:

                res = livepeer.generate.audio_to_text(request={
                    "audio": {
                        "file_name": "example.file",
                        "content": open("example.file", "rb"),
                    },
                    "model_id": "",
                    "return_timestamps": "true",
                })

                assert res.text_response is not None

                # Handle response
                print(res.text_response)
  - target: $["paths"]["/image-to-image"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: genImageToImage
          source: |-
            from livepeer_ai import Livepeer

            with Livepeer(
                http_bearer="<YOUR_BEARER_TOKEN_HERE>",
            ) as livepeer:

                res = livepeer.generate.image_to_image(request={
                    "prompt": "<value>",
                    "image": {
                        "file_name": "example.file",
                        "content": open("example.file", "rb"),
                    },
                    "model_id": "",
                    "loras": "",
                    "strength": 0.8,
                    "guidance_scale": 7.5,
                    "image_guidance_scale": 1.5,
                    "negative_prompt": "",
                    "safety_check": True,
                    "num_inference_steps": 100,
                    "num_images_per_prompt": 1,
                })

                assert res.image_response is not None

                # Handle response
                print(res.image_response)
  - target: $["paths"]["/image-to-text"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: genImageToText
          source: |-
            from livepeer_ai import Livepeer

            with Livepeer(
                http_bearer="<YOUR_BEARER_TOKEN_HERE>",
            ) as livepeer:

                res = livepeer.generate.image_to_text(request={
                    "image": {
                        "file_name": "example.file",
                        "content": open("example.file", "rb"),
                    },
                    "prompt": "",
                    "model_id": "",
                })

                assert res.image_to_text_response is not None

                # Handle response
                print(res.image_to_text_response)
  - target: $["paths"]["/image-to-video"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: genImageToVideo
          source: |-
            from livepeer_ai import Livepeer

            with Livepeer(
                http_bearer="<YOUR_BEARER_TOKEN_HERE>",
            ) as livepeer:

                res = livepeer.generate.image_to_video(request={
                    "image": {
                        "file_name": "example.file",
                        "content": open("example.file", "rb"),
                    },
                    "model_id": "",
                    "height": 576,
                    "width": 1024,
                    "fps": 6,
                    "motion_bucket_id": 127,
                    "noise_aug_strength": 0.02,
                    "safety_check": True,
                    "num_inference_steps": 25,
                })

                assert res.video_response is not None

                # Handle response
                print(res.video_response)
  - target: $["paths"]["/live-video-to-video"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: genLiveVideoToVideo
          source: |-
            from livepeer_ai import Livepeer

            with Livepeer(
                http_bearer="<YOUR_BEARER_TOKEN_HERE>",
            ) as livepeer:

                res = livepeer.generate.live_video_to_video(request={
                    "subscribe_url": "https://soulful-lava.org/",
                    "publish_url": "https://vain-tabletop.biz",
                    "control_url": "",
                    "events_url": "",
                    "model_id": "",
                })

                assert res.live_video_to_video_response is not None

                # Handle response
                print(res.live_video_to_video_response)
  - target: $["paths"]["/llm"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: genLLM
          source: |-
            from livepeer_ai import Livepeer

            with Livepeer(
                http_bearer="<YOUR_BEARER_TOKEN_HERE>",
            ) as livepeer:

                res = livepeer.generate.llm(request={
                    "messages": [

                    ],
                    "model": "",
                    "temperature": 0.7,
                    "max_tokens": 256,
                    "top_p": 1,
                    "top_k": -1,
                    "stream": False,
                })

                assert res.llm_response is not None

                # Handle response
                print(res.llm_response)
  - target: $["paths"]["/segment-anything-2"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: genSegmentAnything2
          source: |-
            from livepeer_ai import Livepeer

            with Livepeer(
                http_bearer="<YOUR_BEARER_TOKEN_HERE>",
            ) as livepeer:

                res = livepeer.generate.segment_anything2(request={
                    "image": {
                        "file_name": "example.file",
                        "content": open("example.file", "rb"),
                    },
                    "model_id": "",
                    "multimask_output": True,
                    "return_logits": True,
                    "normalize_coords": True,
                })

                assert res.masks_response is not None

                # Handle response
                print(res.masks_response)
  - target: $["paths"]["/text-to-image"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: genTextToImage
          source: |-
            from livepeer_ai import Livepeer

            with Livepeer(
                http_bearer="<YOUR_BEARER_TOKEN_HERE>",
            ) as livepeer:

                res = livepeer.generate.text_to_image(request={
                    "model_id": "",
                    "loras": "",
                    "prompt": "<value>",
                    "height": 576,
                    "width": 1024,
                    "guidance_scale": 7.5,
                    "negative_prompt": "",
                    "safety_check": True,
                    "num_inference_steps": 50,
                    "num_images_per_prompt": 1,
                })

                assert res.image_response is not None

                # Handle response
                print(res.image_response)
  - target: $["paths"]["/text-to-speech"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: genTextToSpeech
          source: |-
            from livepeer_ai import Livepeer

            with Livepeer(
                http_bearer="<YOUR_BEARER_TOKEN_HERE>",
            ) as livepeer:

                res = livepeer.generate.text_to_speech(request={
                    "model_id": "",
                    "text": "",
                    "description": "A male speaker delivers a slightly expressive and animated speech with a moderate speed and pitch.",
                })

                assert res.audio_response is not None

                # Handle response
                print(res.audio_response)
  - target: $["paths"]["/upscale"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: genUpscale
          source: |-
            from livepeer_ai import Livepeer

            with Livepeer(
                http_bearer="<YOUR_BEARER_TOKEN_HERE>",
            ) as livepeer:

                res = livepeer.generate.upscale(request={
                    "prompt": "<value>",
                    "image": {
                        "file_name": "example.file",
                        "content": open("example.file", "rb"),
                    },
                    "model_id": "",
                    "safety_check": True,
                    "num_inference_steps": 75,
                })

                assert res.image_response is not None

                # Handle response
                print(res.image_response)
